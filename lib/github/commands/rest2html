#!/usr/bin/env python
"""
rest2html - A small wrapper file for parsing ReST files at GitHub.

Written in 2008 by Jannis Leidel <jannis@leidel.info>

Brandon Keepers <bkeepers@github.com>
Bryan Veloso <bryan@revyver.com>
Chris Wanstrath <chris@ozmm.org>
Dave Abrahams <dave@boostpro.com>
Garen Torikian <garen@github.com>
Gasper Zejn <zejn@kiberpipa.org>
Michael Jones <m.pricejones@gmail.com>
Sam Whited <sam@samwhited.com>
Tyler Chung <zonyitoo@gmail.com>
Vicent Marti <tanoku@gmail.com>

To the extent possible under law, the author(s) have dedicated all copyright
and related and neighboring rights to this software to the public domain
worldwide. This software is distributed without any warranty.

You should have received a copy of the CC0 Public Domain Dedication along with
this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
"""

__author__ = "Jannis Leidel"
__license__ = "CC0"
__version__ = "0.1"

try:
    import locale
    locale.setlocale(locale.LC_ALL, '')
except:
    pass

import sys
import codecs

from docutils.core import publish_parts
from docutils.writers.html4css1 import Writer, HTMLTranslator

# setup blockdiag
try:
    from blockdiag.utils.rst.directives import setup as blockdiag_setup
    blockdiag_setup(format='SVG', nodoctype=True, inline_svg=True,
                    noviewbox=True, ignore_pil=True)
except:
    pass
# setup seqdiag
try:
    from seqdiag.utils.rst.directives import setup as seqdiag_setup
    seqdiag_setup(format='SVG', nodoctype=True, inline_svg=True,
                  noviewbox=True, ignore_pil=True)
except:
    pass
# setup actdiag
try:
    from actdiag.utils.rst.directives import setup as actdiag_setup
    actdiag_setup(format='SVG', nodoctype=True, inline_svg=True,
                  noviewbox=True, ignore_pil=True)
except:
    pass
# setup nwdiag
try:
    from nwdiag.utils.rst.directives import setup as nwdiag_setup
    nwdiag_setup(format='SVG', nodoctype=True, inline_svg=True,
                 noviewbox=True, ignore_pil=True)
except:
    pass

SETTINGS = {
    'cloak_email_addresses': True,
    'file_insertion_enabled': False,
    'raw_enabled': False,
    'strip_comments': True,
    'doctitle_xform': False,
    'report_level': 5,
    'syntax_highlight' : 'none',
    'math_output' : 'latex'
}

class GitHubHTMLTranslator(HTMLTranslator):
    # removes the <div class="document"> tag wrapped around docs
    # see also: http://bit.ly/1exfq2h (warning! sourceforge link.)
    def depart_document(self, node):
        HTMLTranslator.depart_document(self, node)
        self.html_body.pop(0)
        self.html_body.pop()

    # technique for visiting sections, without generating additional divs
    # see also: http://bit.ly/NHtyRx
    def visit_section(self, node):
        self.section_level += 1

    def depart_section(self, node):
        self.section_level -= 1

    def visit_literal_block(self, node):
        classes = node.attributes['classes']
        if len(classes) >= 2 and classes[0] == 'code':
            language = classes[1]
            del classes[:]
            self.body.append(self.starttag(node, 'pre', lang=language))
        else:
            self.body.append(self.starttag(node, 'pre'))

    def visit_table(self, node):
        classes = ' '.join(['docutils', self.settings.table_style]).strip()
        self.body.append(
                self.starttag(node, 'table', CLASS=classes))

    def depart_table(self, node):
        self.body.append('</table>\n')

def main():
    """
    Parses the given ReST file or the redirected string input and returns the
    HTML body.

    Usage: rest2html < README.rst
           rest2html README.rst
    """
    try:
        text = codecs.open(sys.argv[1], 'r', 'utf-8').read()
    except IOError: # given filename could not be found
        return ''
    except IndexError: # no filename given
        text = sys.stdin.read()

    writer = Writer()
    writer.translator_class = GitHubHTMLTranslator

    parts = publish_parts(text, writer=writer, settings_overrides=SETTINGS)
    if 'html_body' in parts:
        html = parts['html_body']

        # publish_parts() in python 2.x return dict values as Unicode type
        # in py3k Unicode is unavailable and values are of str type
        if isinstance(html, str):
            return html
        else:
            return html.encode('utf-8')
    return ''

if __name__ == '__main__':
    sys.stdout.write("%s%s" % (main(), "\n"))
    sys.stdout.flush()
